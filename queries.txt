CREATE TABLE IF NOT EXISTS player(id INTEGER primary key, name TEXT)
CREATE TABLE IF NOT EXISTS fight(p1 INTEGER, p2 INTEGER, winner INTEGER, p1amount INTEGER, p2amount INTEGER, timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY(p1) REFERENCES player(id), FOREIGN KEY(p2) REFERENCES player(id))
CREATE VIEW IF NOT EXISTS nonTeamPlayers AS SELECT * FROM player WHERE name NOT LIKE "%Team%"

INSERT INTO player (name) VALUES ($name)
INSERT INTO fight (p1, p2, winner, p1amount, p2amount) VALUES ($player1, $player2, $winner, $player1amount, $player2amount)

SELECT id FROM player WHERE name = $name

--all players
SELECT id, name FROM player ORDER BY id LIMIT 0,40;


--single person's profits
SELECT name, SUM(profit) FROM
(SELECT name, SUM(p2amount) AS profit FROM player, fight WHERE p1 = player.id AND winner = 1 AND player.name = ?
UNION
SELECT name, SUM(p1amount) AS profit FROM player, fight WHERE p2 = player.id AND winner = 2 AND player.name = ?)

--all persons' profits, sorted by amount
SELECT name, SUM(profit) AS totalprofit FROM
(SELECT name, SUM(p2amount) AS profit FROM player, fight WHERE p1 = player.id AND winner = 1 GROUP BY p1
UNION
SELECT name, SUM(p1amount) AS profit FROM player, fight WHERE p2 = player.id AND winner = 2 GROUP BY p2)
GROUP BY name
ORDER BY totalprofit DESC

select name, sum(profit) as tprofit from
(select id, name, sum(p2amount) as profit from player, fight where p1 = player.id and winner = 1 group by p1
union
select id, name, sum(p1amount) as profit from player, fight where p2 = player.id and winner = 2 group by p2)
group by id order by tprofit desc limit 0,10;


--single person's number of matches
SELECT name, SUM(matches) FROM
(SELECT name, COUNT(player.id) AS matches FROM player, fight WHERE p1 = player.id AND player.name = ?
UNION
SELECT name, COUNT(player.id) AS matches FROM player, fight WHERE p2 = player.id AND player.name = ?)

--all persons' number of matches, sorted by number
SELECT name, SUM(matches) AS totalmatches FROM
(SELECT name, COUNT(player.id) AS matches FROM player, fight WHERE p1 = player.id GROUP BY p1
UNION
SELECT name, COUNT(player.id) AS matches FROM player, fight WHERE p2 = player.id GROUP BY p2)
GROUP BY name
ORDER BY totalmatches DESC

--experiment: non-team player version of the above

SELECT name, SUM(matches) AS totalmatches FROM
(SELECT name, COUNT(nonTeamPlayers.id) AS matches FROM nonTeamPlayers, fight WHERE p1 = nonTeamPlayers.id GROUP BY p1
UNION
SELECT name, COUNT(nonTeamPlayers.id) AS matches FROM nonTeamPlayers, fight WHERE p2 = nonTeamPlayers.id GROUP BY p2)
GROUP BY name
ORDER BY totalmatches DESC


--ranking of wins for a particular set of players
SELECT name, COUNT(*) AS wins FROM player, fight WHERE ((p1 = player.id AND winner = 1) OR (p2 = player.id AND winner = 2)) AND (player.name = ? OR player.name = ?) GROUP BY player.id

--ranking of wins
SELECT name, COUNT(*) AS wins FROM player, fight WHERE (p1 = player.id AND winner = 1) OR (p2 = player.id AND winner = 2) GROUP BY player.id ORDER BY wins DESC

--ranking of matches
SELECT COUNT(*) AS matches, p1.name AS p1name, p2.name AS p2name, winner FROM fight, player AS p1, player AS p2 WHERE p1 = p1.id AND p2 = p2.id GROUP BY p1, p2, winner

--matches for a particular pairing
SELECT COUNT(*) AS matches, p1.name AS p1name, p2.name AS p2name, winner FROM fight, player AS p1, player AS p2 WHERE p1 = p1.id AND p2 = p2.id AND ((p1.name = ?1 AND p2.name = ?2) OR (p1.name = ?2 AND p2.name = ?1)) GROUP BY p1, p2, winner

--coalesced win/loss record, sorted by win/loss record deemed more accurate
--after 3 matches (so 3+ wins with no defeats is better than 6w/3l, but 1w/0l is not)
SELECT pwin.id AS id, pwin.name AS name, pwin.wins AS wins, plose.losses AS losses FROM
(SELECT p1.id, p1.name, coalesce(wins, 0) AS wins FROM
((SELECT id, name from player) p1
LEFT OUTER JOIN
(SELECT id, COUNT(*) AS wins FROM player, fight WHERE
(p1 = player.id AND winner = 1) OR (p2 = player.id AND winner = 2)
 GROUP BY player.id) p2
ON p1.id = p2.id)) pwin
INNER JOIN
(SELECT p1.id, p1.name, coalesce(losses, 0) AS losses FROM
((SELECT id, name from player) p1
LEFT OUTER JOIN
(SELECT id, COUNT(*) AS losses FROM player, fight WHERE
(p1 = player.id AND winner = 2) OR (p2 = player.id AND winner = 1)
 GROUP BY player.id) p2
ON p1.id = p2.id)) plose
ON pwin.id = plose.id
ORDER BY ((pwin.wins+3)/(plose.losses+3)) DESC, pwin.wins DESC

--same as above but with a specific two people
SELECT pwin.id AS id, pwin.name AS name, pwin.wins AS wins, plose.losses AS losses FROM
(SELECT p1.id, p1.name, coalesce(wins, 0) AS wins FROM
((SELECT id, name from player WHERE (name = ?1 OR name = ?2)) p1
LEFT OUTER JOIN
(SELECT id, COUNT(*) AS wins FROM player, fight WHERE
(p1 = player.id AND winner = 1) OR (p2 = player.id AND winner = 2)
 GROUP BY player.id) p2
ON p1.id = p2.id)) pwin
INNER JOIN
(SELECT p1.id, p1.name, coalesce(losses, 0) AS losses FROM
((SELECT id, name from player WHERE (name = ?1 OR name = ?2)) p1
LEFT OUTER JOIN
(SELECT id, COUNT(*) AS losses FROM player, fight WHERE
(p1 = player.id AND winner = 2) OR (p2 = player.id AND winner = 1)
 GROUP BY player.id) p2
ON p1.id = p2.id)) plose
ON pwin.id = plose.id
ORDER BY ((pwin.wins+3)/(plose.losses+3)) DESC, pwin.wins DESC

--number of players
SELECT COUNT(*) AS players FROM player;

--number of players, not counting teams
SELECT COUNT(*) AS players FROM player WHERE name NOT LIKE '%Team%';

--number of fights
SELECT COUNT(*) AS fights FROM fight;

--number of fights, not counting matches involving teams
SELECT COUNT(*) AS fights FROM fight WHERE p1 NOT IN (SELECT id FROM player WHERE name LIKE '%Team%') AND p2 NOT IN (SELECT id FROM player WHERE name LIKE '%Team%');

--players by when they were first recorded
SELECT pl1.id, pl1.name, f1.timestamp FROM player pl1, fight f1 WHERE (pl1.id = f1.p1 OR pl1.id = f1.p2) AND timestamp <= (SELECT MIN(timestamp) FROM fight f2 WHERE pl1.id = f2.p1 OR pl1.id = f2.p2) ORDER BY pl1.id LIMIT 0,40;

--new players per day
SELECT STRFTIME('%Y-%m-%d', timestamp, 'localtime') AS date, count(*) AS players FROM player pl1, fight f1 WHERE (pl1.id = f1.p1 OR pl1.id = f1.p2) AND timestamp <= (SELECT MIN(timestamp) FROM fight f2 WHERE pl1.id = f2.p1 OR pl1.id = f2.p2) GROUP BY STRFTIME('%Y%m%d', timestamp, 'localtime') ORDER BY STRFTIME('%Y%m%d', timestamp, 'localtime') ASC;

--fights by day
SELECT STRFTIME('%Y-%m-%d', timestamp, 'localtime') AS date, count(*) AS fights FROM fight GROUP BY STRFTIME('%Y%m%d', timestamp, 'localtime') ORDER BY STRFTIME('%Y%m%d', timestamp, 'localtime') ASC;

--fights by day, hour
SELECT STRFTIME('%Y-%m-%d', timestamp, 'localtime') AS date, STRFTIME('%H', timestamp, 'localtime') as hour, count(*) AS fights FROM fight GROUP BY STRFTIME('%Y%m%d%H', timestamp, 'localtime') ORDER BY STRFTIME('%Y%m%d', timestamp, 'localtime') ASC, STRFTIME('%H', timestamp, 'localtime') ASC;


--fights by hour of the day
SELECT STRFTIME('%H', timestamp, 'localtime') AS hour, count(*) AS fights FROM fight GROUP BY STRFTIME('%H', timestamp, 'localtime') ORDER BY STRFTIME('%H', timestamp, 'localtime') ASC;